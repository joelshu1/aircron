---
description: 
globs: 
alwaysApply: true
---
AirCron UI — Cursor Rules File (v1, 2025-06-26)

These rules govern day-to-day development inside Cursor/VS Code for the new Python-based AirCron UI. Keep this file in the project root and update only when the architecture or major tooling changes.

⸻

1  Target Platform

Item	Value
Backend Language	Python 3.12 (CPython)
Frontend Stack	Flask-rendered HTML + HTMX + Vanilla JS/hyperscript
Tray Shell	rumps (menu-bar, no Dock icon)
Packaging	PyInstaller 5 (--onefile --windowed) → AirCron.app
Host OS	macOS 10.13 High Sierra (Intel)
Minimum Python	3.12.0 (bundled via PyInstaller)


⸻

2  Allowed / Disallowed APIs & Libs

Allowed	Disallowed
flask (≤2.x), jinja2, werkzeug, htmx.js, hyperscript, croniter, rumps, pytest, pytest-cov, black, ruff, isort, Pathlib	Async frameworks (fastapi, quart), heavy front-end frameworks (React, Vue, Angular, Svelte), Electron, SQLAlchemy (use plain SQLite sqlite3), asyncio, multiprocessing, any lib requiring macOS ≥10.14

Rationale — keep footprint tiny; guarantee compatibility with 10.13; avoid shipping 100 MB runtimes.

⸻

3  Coding Style Rules (Python)
	1.	PEP 8 enforced by ruff and auto-formatted by black --line-length 100.
	2.	Use type hints; run mypy (strict = True) in CI.
	3.	Path handling via Pathlib only.
	4.	One public class or cohesive set of functions per module.
	5.	No global mutable state—use dependency injection (current_app, g) or singletons.
	6.	Docstrings follow Google style; functions shorter than 5 lines may inline documentation.
	7.	Catch only specific exceptions; never blanket except Exception.
	8.	Avoid inline print(); use logging with INFO default level; rotate ~/Library/Logs/AirCron/aircron.log.

3.1  JavaScript / HTMX Style

Rule	Guideline
File Naming	kebab-case.js, app.js main entry
Framework	htmx + hyperscript only; Alpine.js allowed for micro-interactions
Styling	Tailwind 3 @apply in <style> blocks or CDN; no CSS-in-JS
No build-step	Keep JS in static/app.js; avoid bundlers; plain ES 2020 syntax


⸻

4  Project Structure

aircron-ui/
├── main.py                # rumps entry; launches Flask
├── app/                   # Flask package
│   ├── __init__.py        # create_app()
│   ├── views.py           # HTML routes
│   ├── api.py             # JSON endpoints
│   ├── cronblock.py       # read/write cron section
│   ├── speakers.py        # Airfoil AppleScript wrapper
│   ├── jobs_store.py      # JSON I/O
│   └── tests/
│       ├── __init__.py
│       ├── test_cronblock.py
│       └── test_api.py
├── templates/
│   └── index.html         # main HTMX layout
├── static/
│   ├── app.js             # JS helpers
│   └── tailwind.min.css   # CDN build (no PostCSS)
├── requirements.txt       # pinned versions
├── build.sh               # PyInstaller script
└── .github/workflows/ci.yml

Single source of truth — All job data lives in jobs_store.py (~/Library/Application Support/AirCron/jobs.json).

⸻

5  Business Logic Rules
	1.	Cron markers must remain exactly # BEGIN AirCron / # END AirCron.
	2.	Save to cron only on explicit API call POST /api/cron/apply.
	3.	jobs.json is canonical; UI never parses crontab for state.
	4.	Speaker discovery via AppleScript:
osascript -e 'tell application "Airfoil" to get (name of speakers whose connected is true)'.
	5.	Validation — duplicate time + overlapping days within same zone is forbidden; respond 409 Conflict.
	6.	Fade duration fixed 8 s; handled in aircron_run.sh (16 × 0.5 s steps).

⸻

6  Dependency & Environment Checks (startup)

from pathlib import Path, shutil
assert Path('/usr/local/bin/spotify').is_file(), "Install spotify-cli"
if shutil.which('crontab') is None:
    raise RuntimeError('cron not found in PATH')

If Airfoil isn’t running, flash yellow badge in tray but allow UI.

⸻

7  Packaging & Distribution
	1.	Build: ./build.sh wraps app via PyInstaller.
	2.	Output: dist/AirCron.app (~35 MB). No Dock icon; launches menu-bar item.
	3.	Gatekeeper: internal machine has spctl --master-disable; codesign ad-hoc is enough.
	4.	Ship a launch-agent plist (com.orchid.aircron.plist) to ~/Library/LaunchAgents for autostart.

⸻

8  Continuous Integration

Stage	Command
Lint	ruff check .
Format	black --check . && isort --check-only .
Static Type	mypy app --strict
Test	pytest --cov=app --cov-fail-under=90
Build	./build.sh (dry-run)

CI runs on GitHub Actions (macos-latest) to catch any PyInstaller regressions.

⸻

9  Commit Message Template

[Module] Imperative short summary

- WHAT changed and WHY (context), max 72 chars per line.
- Reference spec section or issue # where applicable.


⸻

10  Future-Proof Notes
	1.	When dropping 10.13 support, migrate to PyOxidizer + SwiftUI menu-bar wrapper.
	2.	Consider replacing cron with APScheduler in-proc for true cross-platform.
	3.	Swap Airfoil AppleScript with pyatv when Apple deprecates scripting access.

⸻

End of Cursor Rules